version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.11.12
      - image: circleci/mysql:5.7
        command: [--character-set-server=utf8mb4, --collation-server=utf8mb4_general_ci, --default-storage-engine=innodb]
    working_directory: /go/src/github.com/fukuyama012/cycle-reminder
    steps:
      - setup_remote_docker
      - checkout

      - restore_cache:
          keys:
            - golang-{{.Environment.CACHE_VERSION}}-1.11

      - run: |
          export GOPATH=/home/circleci/go
          mkdir -p $GOPATH
          if [ ! -e $GOPATH/bin/go-junit-report ]; then
            go get github.com/jstemmer/go-junit-report
          fi
          if [ ! -e $GOPATH/bin/dep ]; then
            go get github.com/golang/dep/cmd/dep
          fi
          go get -u github.com/revel/revel
          go get -u github.com/revel/cmd/revel

      - save_cache:
          key: golang-{{.Environment.CACHE_VERSION}}-1.11
          paths:
            - /home/circleci/go

      - restore_cache:
          keys:
            - vendor-{{.Environment.CACHE_VERSION}}-{{ checksum "service/web/Gopkg.lock" }}

      - run:
          command: /home/circleci/go/bin/dep ensure
          working_directory: service/web
          
      - save_cache:
          key: vendor-{{.Environment.CACHE_VERSION}}-{{ checksum "service/web/Gopkg.lock" }}
          paths:
            - service/web/vendor

      - run:
          name: golint bash exec
          command: bash golint.sh
          working_directory: service
          
      - run: |
          /home/circleci/go/bin/revel run -a github.com/fukuyama012/cycle-reminder/service/web prod
          dockerize -wait tcp://localhost:3306 -timeout 1m

          export MYSQL_USER=root
          export MYSQL_PASSWORD=
          export MYSQL_DATABASE=circle_test
          export MYSQL_PORT=3306
          export MYSQL_ADDRESS=127.0.0.1
          export SENDGRID_API_KEY=
          
          mkdir -p /tmp/test-results/go
          echo "mode: set" >> /tmp/coverage.out
          cd service/web
          for PKG in $(go list ./...|grep -v vendor); do
            go test -v -coverprofile=tmp.txt $PKG -p 1 | tee -a /tmp/test-results/go/test.out
            cat tmp.txt | tail -n +2 >> /tmp/coverage.out
            rm -f tmp.txt
          done
          go tool cover -html=/tmp/coverage.out  -o /tmp/coverage.html
          /home/circleci/go/bin/go-junit-report < /tmp/test-results/go/test.out > /tmp/test-results/go/test-report.xml
          
      - store_test_results:
          path: /tmp/test-results

      - store_artifacts:
          path: /tmp/coverage.html


  deploy-prod:
    machine:
      image: circleci/classic:edge
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "e1:23:4d:45:16:6d:59:17:5c:0b:6f:e4:3f:b6:f3:84"
    - run:
        name: Start ssh-keyscan
        command: |
          ssh-keyscan -p ${HOST_PORT} ${HOST_NAME} >> ~/.ssh/known_hosts
    - run:
        name: transfer docker-compose.yml
        command: scp -P ${HOST_PORT} docker-compose.yml ${HOST_USER}@${HOST_NAME}:/home/${HOST_USER}/cycle-reminder/service
        working_directory: service
    - run:
        name: new images deploy
        command: |
          ssh -p ${HOST_PORT} ${HOST_USER}@${HOST_NAME} "cd ~/cycle-reminder/service && docker-compose pull web && docker-compose up --no-deps -d web"
    - run:
        name: clean up unnecessary images
        command: |
          ssh -p ${HOST_PORT} ${HOST_USER}@${HOST_NAME} 'docker rmi $(docker images -f dangling=true -q)'

workflows:
  version: 2
  build_and_deploy:
    jobs:
    - build
    - deploy-prod:
        requires:
        - build
        filters:
          branches:
            only: master
